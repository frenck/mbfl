
## ------------------------------------------------------------
## Installation canned commands.
## ------------------------------------------------------------

# Synopsis: $(call ds-assert-srcdir,<MODULE_NAME>)
define ds-assert-srcdir
$(if $($(1)_SRCDIR),\
	$(shell test -d $($(1)_SRCDIR) || \
		printf "*warning*: missing srcdir '%s'\n" $($(1)_SRCDIR) >&2),\
	$(error null source directory variable "$(1)_SRCDIR"))
endef

# Synopsis: $(call ds-make-builddir,<MODULE_NAME>)
define ds-make-builddir
$(if $($(1)_BUILDDIR),\
	$(shell test -d $($(1)_BUILDDIR) || $(MKDIR) $($(1)_BUILDDIR)),\
	$(error null build directory variable "$(1)_BUILDDIR"))
endef

# Synopsis: $(call ds-install-directory,<MODULE_NAME>)
define ds-install-directory
$(if $($(1)_INSTDIR),$(INSTALL) \
	-m $(if $($(1)_DMODE),$($(1)_DMODE),$(INSTALL_DIR_MODE)) \
	-d $(INSTALL_ROOT)$($(1)_INSTDIR),\
	$(error null install directory variable "$(1)_INSTDIR"))
endef

# Synopsis: $(call ds-install-files,<MODULE_NAME>,<INSTALL_MODE>)
define ds-install-files
$(if $($(1)_INSTLST),\
	$(if $($(1)_INSTDIR),\
	$(INSTALL) \
		$(if $($(1)_FMODE),-m $($(1)_FMODE),$(INSTALL_$(2)_MODE)) \
		$(if $($(1)_OWNER),-o $($(1)_OWNER),) \
		$(if $($(1)_GROUP),-g $($(1)_GROUP),) \
		$($(1)_INSTLST) $(INSTALL_ROOT)$($(1)_INSTDIR),\
	$(error null install directory variable "$(1)_INSTDIR")),\
	$(error empty install list variable "$(1)_INSTLST"))
endef

# Synopsis: $(call ds-install-module,<MODULE_NAME>,<INSTALL_MODE>)
define ds-install-module
$(warning installing $(1) files...)
$(call ds-install-directory,$(1))
$(call ds-install-files,$(1),$(2))
$(warning ------------------------------------------- completed.)
endef

# Synopsis: $(call ds-install-data,<MODULE_NAME>)
define ds-install-data
$(call ds-install-module,$(1),DATA)
endef

# Synopsis: $(call ds-install-bin,<MODULE_NAME>)
define ds-install-bin
$(call ds-install-module,$(1),BIN)
endef

# Synopsis: $(call ds-install-lib,<MODULE_NAME>)
define ds-install-lib
$(call ds-install-module,$(1),LIB)
endef


## ------------------------------------------------------------
## Canned command sequences.
## ------------------------------------------------------------

# Synopsis: $(call ds-clean-files,<MODULE_NAME>)
define ds-clean-files
$(if $($(1)_CLEANFILES),$(RM) $($(1)_CLEANFILES),\
	$(warning empty clean variable "$(1)_CLEANFILES"))
endef

# Synopsis: $(call ds-real-clean-files,<MODULE_NAME>)
define ds-real-clean-files
$(if $($(1)_REALCLEANFILES),$(RM) $($(1)_REALCLEANFILES),\
	$(warning empty real clean variable "$(1)_REALCLEANFILES"))
endef

# To be invoked with (call), example:
#
#	section_SOURCES = $(call files-from-dir,$(section_SRCDIR))

# Collects files dropping out backups.
# Synopsis: $(call ds-files-from-dir,<DIRECTORY>)
ds-files-from-dir	= $(filter-out %~, $(wildcard $(1)/*))
# Synopsis: DS_FILES_FROM_DIR(<DIRECTORY>)


# Replaces a directory with another in a group of files.
# Synopsis: $(call ds-replace-dir,<DIRECTORY>)
ds-replace-dir		= $(addprefix $(1)/, $(notdir $(2)))
# Synopsis: DS_REPLACE_DIR(<DIRECTORY>)



# @configure_input@
# 

#page
## ------------------------------------------------------------
## Package variables.
## ------------------------------------------------------------

PACKAGE_NAME		= @PACKAGE_NAME@
PACKAGE_VERSION		= @PACKAGE_VERSION@
PACKAGE_VERSION_MAJMIN	= @PACKAGE_VERSION_MAJMIN@
PACKAGE_XVERSION	= @PACKAGE_XVERSION@
PKG_DIR			= $(PACKAGE_NAME)_$(PACKAGE_XVERSION)

PACKAGE_NAME_LOWERCASE	= @PACKAGE_NAME_LOWERCASE@

#page
## ------------------------------------------------------------
## Directory variables.
## ------------------------------------------------------------

# Select 'INSTALL_ROOT' from the command line:
#
#  make ... INSTALL_ROOT=/tmp/project_1.2.3
#
INSTALL_ROOT	?=

# If there is not a value for "TMPDIR" from the environment
# we select a common default.
TMPDIR		?= /tmp

abs_top_builddir = @abs_top_builddir@
abs_builddir	= @abs_builddir@
abs_top_srcdir	= @abs_top_srcdir@
abs_srcdir	= @abs_srcdir@

top_builddir	= $(if @top_builddir@,@top_builddir@,.)
builddir	= $(if @builddir@,@builddir@,.)
top_srcdir	= $(if @top_srcdir@,@top_srcdir@,.)
srcdir		= $(if @srcdir@,@srcdir@,.)

prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
datadir		= @datadir@
docdir		= $(prefix)/doc
includedir	= @includedir@
infodir		= @infodir@
libdir		= @libdir@
libexecdir	= @libexecdir@
localstatedir	= @localstatedir@
mandir		= @mandir@
sbindir		= @sbindir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@

pkgdatadir	= $(datadir)/$(PKG_DIR)
pkgdocdir	= $(docdir)/packages/$(PKG_DIR)
pkgexampledir	= $(pkgdocdir)/examples
pkghtmldir	= $(pkgdocdir)/HTML
pkginfodir	= $(infodir)
pkgincludedir	= $(includedir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkglibexecdir	= $(libexecdir)/$(PKG_DIR)
pkgsysconfdir	= $(sysconfdir)/$(PKG_DIR)

#page
## ------------------------------------------------------------
## Common programs.
## ------------------------------------------------------------

BASH_PROGRAM	= @BASH_PROGRAM@
SHELL		= @SHELL@
@SET_MAKE@

BZIP		= @BZIP@
CAT		= @CAT@
CP		= @CP@
DATE		= @DATE@
GREP		= @GREP@
GAWK		= @GAWK@
GZIP		= @GZIP@
M4		= @M4@
MAKEINFO	= @MAKEINFO@
MKDIR		= @MKDIR@ --parents --verbose
RM		= @RM@ --force --recursive --verbose --
SED		= @SED@
SYMLINK		= @SYMLINK@ --symbolic
TAR		= @TAR@
TCLSH		= @TCLSH@

DEVELSTUFF	= @DEVELSTUFF@

INSTALL			= @INSTALL@
INSTALL_DIR_MODE	= 0755
INSTALL_BIN_MODE	= -m 0555
INSTALL_DATA_MODE	= -m 0444
INSTALL_LIB_MODE	= -m 0444 --strip



#page
## ------------------------------------------------------------
## Main rules.
## ------------------------------------------------------------

ds_group_RULES	= bin dev doc sta
ds_main_RULES	= all clean realclean install

.PHONY: $(ds_group_RULES) $(ds_main_RULES)
.PHONY: $(foreach rule, $(ds_group_RULES), $(addprefix $(rule)-, $(ds_main_RULES)))

all:		$(ds_group_RULES)
clean:		$(addsuffix -clean, $(ds_group_RULES))
realclean:	$(addsuffix -realclean, $(ds_group_RULES))
install:	$(addsuffix -install, $(ds_group_RULES))

$(ds_group_RULES):

$(addsuffix -all, $(ds_group_RULES)): %-all : %

.PHONY: dist bindist reconfigure automake

dist bindist dist-test:
	$(DEVELSTUFF) --$(@)

reconfigure:
	$(MAKE) clean
	$(MAKE) realclean
	$(DEVELSTUFF) --autoconf --verbose
	$(DEVELSTUFF) --reconfigure --verbose --builddir="$(builddir)"

automake:
	$(DEVELSTUFF) --automake --verbose
	./config.status

# Makefile.ds --
#

#PAGE
## ------------------------------------------------------------
## Search paths and programs.
## ------------------------------------------------------------

vpath	%.m4		$(top_srcdir)/macros
vpath	%.sh.m4		$(top_srcdir)/modules
vpath	%.sh.m4		$(top_srcdir)/lib
vpath	%.sh.m4		$(top_srcdir)/examples
vpath	%.sh.m4		$(builddir)


MBFL_LIBRARY	= $(top_srcdir)/infrastructure/libmbfl.sh
MBFLPP_SCRIPT	= $(top_srcdir)/infrastructure/mbflpp.sh
MBFLPP_MODULES_FLAGS = \
		--include=$(top_srcdir)/macros				\
		--library=preprocessor.m4	 			\
		--define=__PKGDATADIR__=$(pkgdatadir)			\
		--define=__PACKAGE_NAME__=$(PACKAGE_NAME)		\
		--define=__PACKAGE_VERSION__=$(PACKAGE_XVERSION)
MBFLPP_LIBRARY_FLAGS = \
		--include=$(modules_BUILDDIR)				\
		--show-program --preserve-comments

MBFLPP		= MBFL_LIBRARY=$(MBFL_LIBRARY) $(BASH_PROGRAM) $(MBFLPP_SCRIPT)

#PAGE
## ------------------------------------------------------------
## Modules rules.
## ------------------------------------------------------------

MODULES			= base encode file getopts message program signal \
			  string dialog main variable system interfaces


modules_SRCDIR	?= $(top_srcdir)/modules
$(call ds-assert-srcdir,modules)


modules_BUILDDIR	?= $(builddir)/modules.d
modules-make-builddir:
	$(call ds-make-builddir,modules)
modules-all: modules-make-builddir


modules_SOURCES	= $(foreach m, $(MODULES), $(modules_SRCDIR)/$(m).sh.m4)
modules_TARGETS	= $(call ds-replace-dir,$(modules_BUILDDIR),$(modules_SOURCES:.sh.m4=.sh))

modules_CLEANFILES	= $(modules_TARGETS)
modules_REALCLEANFILES	= $(modules_CLEANFILES)


.PHONY: $(addprefix modules-, all clean realclean)
modules-all: $(modules_TARGETS)
modules-clean:
	-@$(call ds-clean-files,modules)
modules-realclean:
	-@$(call ds-real-clean-files,modules)
bin:		modules-all
bin-clean:	modules-clean
bin-realclean:	modules-realclean


$(modules_TARGETS): $(modules_BUILDDIR)/%.sh: $(modules_SRCDIR)/%.sh.m4 preprocessor.m4
	$(MBFLPP) $(MBFLPP_MODULES_FLAGS) <$(<) >$(@)

#page
## ------------------------------------------------------------
## Library rules.
## ------------------------------------------------------------

LIBNAME			= libmbfl.sh
LIBRARIES		= $(top_srcdir)/lib/libmbfltest.sh

library_TARGETS		= $(LIBNAME)
library_INSTLST		= $(library_TARGETS) $(LIBRARIES)
library_INSTDIR		= $(pkgdatadir)

library_CLEANFILES	= $(library_TARGETS)
library_REALCLEANFILES	= $(library_CLEANFILES)


.PHONY: $(addprefix library-, all clean realclean install)
library-all: $(library_TARGETS)
library-clean:
	-@$(call ds-clean-files,library)
library-realclean:
	-@$(call ds-real-clean-files,library)
library-install: library-install-sub
	@$(call ds-install-module,library,DATA)
library-install-sub:
bin:		library-all
bin-clean:	library-clean
bin-realclean:	library-realclean
bin-install:	library-install


$(LIBNAME): libmbfl.sh.m4 preprocessor.m4 $(modules_TARGETS)
	$(MBFLPP) $(MBFLPP_LIBRARY_FLAGS) <$(<) >$(@)

#page
## ------------------------------------------------------------
## Script rules.
## ------------------------------------------------------------

script_TARGETS		= mbflpp.sh mbfltest.sh
script_INSTLST		= mbflpp.sh mbfltest.sh
script_INSTDIR		= $(pkglibexecdir)

script_link_INSTDIR	= $(bindir)

script_CLEANFILES	= $(script_TARGETS)
script_REALCLEANFILES	= $(script_CLEANFILES)


.PHONY: $(addprefix script-, all clean realclean install)
script-all: $(script_TARGETS)
script-clean:
	-@$(call ds-clean-files,script)
script-realclean:
	-@$(call ds-real-clean-files,script)
script-install: script-install-sub
	@$(call ds-install-module,script,BIN)
script-install-sub:
bin:		script-all
bin-clean:	script-clean
bin-realclean:	script-realclean
bin-install:	script-install


script-install-sub:
	$(call ds-install-directory,script_link)
	cd $(INSTALL_ROOT)$(bindir) && \
	$(SYMLINK) ../libexec/$(PKG_DIR)/mbflpp.sh mbflpp.sh
	cd $(INSTALL_ROOT)$(bindir) && \
	$(SYMLINK) ../libexec/$(PKG_DIR)/mbfltest.sh mbfltest.sh

mbflpp.sh: $(top_srcdir)/scripts/mbflpp.sh
	$(MBFLPP) $(MBFLPP_MODULES_FLAGS) --add-bash --preserve-comments <$(<) >$(@)

mbfltest.sh: $(top_srcdir)/scripts/mbfltest.sh
	$(MBFLPP) $(MBFLPP_MODULES_FLAGS) --add-bash --preserve-comments <$(<) >$(@)

#page
## ------------------------------------------------------------
## Preprocessor macros rules.
## ------------------------------------------------------------

macros_INSTLST		= $(top_srcdir)/macros/preprocessor.m4
macros_INSTDIR		= $(pkgdatadir)


.PHONY: $(addprefix macros-, all clean realclean install)
macros-all: $(macros_TARGETS)
macros-clean:
	-@$(call ds-clean-files,macros)
macros-realclean:
	-@$(call ds-real-clean-files,macros)
macros-install: macros-install-sub
	@$(call ds-install-module,macros,DATA)
macros-install-sub:
bin:		macros-all
bin-clean:	macros-clean
bin-realclean:	macros-realclean
bin-install:	macros-install


#PAGE
## ------------------------------------------------------------
## Template rules.
## ------------------------------------------------------------

template_INSTLST	= $(call ds-files-from-dir, $(top_srcdir)/examples)
template_INSTDIR	= $(pkgexampledir)


.PHONY: $(addprefix template-, all clean realclean install)
template-all: $(template_TARGETS)
template-clean:
	-@$(call ds-clean-files,template)
template-realclean:
	-@$(call ds-real-clean-files,template)
template-install: template-install-sub
	@$(call ds-install-module,template,DATA)
template-install-sub:
doc:		template-all
doc-clean:	template-clean
doc-realclean:	template-realclean
doc-install:	template-install


#page
## ------------------------------------------------------------
## Test rules.
## ------------------------------------------------------------

testdir		= $(top_srcdir)/tests
test_FILES	= $(wildcard $(testdir)/*.test)
test_TARGETS	= test-all

test_ENV	= PATH=$(abs_top_builddir):$(testdir):$(top_srcdir)/lib:$(PATH)
test_ENV	+= MBFL_LIBRARY=$(abs_top_builddir)/libmbfl.sh
test_CMD	= $(test_ENV) /bin/bash

.PHONY: test-all test-all-verbose

test-all:
ifneq ($(strip $(test_FILES)),)
	@$(foreach f, $(test_FILES), $(test_CMD) $(f);)
endif

test-all-verbose:
ifneq ($(strip $(test_FILES)),)
	@$(foreach f, $(test_FILES), \
	TESTSUCCESS='yes' TESTSTART='yes' $(test_CMD) $(f);)
endif

#page
## ------------------------------------------------------------
## Update targets.
## ------------------------------------------------------------

.PHONY: update-infrastructure

update-infrastructure: libmbfl.sh mbflpp.sh
	$(CP) $(^) $(top_srcdir)/infrastructure/


### end of file
# Local Variables:
# mode: makefile
# End:

#page
## ------------------------------------------------------------
## Test rules.
## ------------------------------------------------------------

test_SRCDIR		= $(top_srcdir)/./tests
test_TARGETS		?=

#test_CLEANFILES	=
#test_REALCLEANFILES	=

.PHONY: test tests test-clean tests-clean test-realclean tests-realclean

test tests: $(test_TARGETS)
test-clean tests-clean:
	-$(RM) $(test_CLEANFILES)
test-realclean tests-realclean:
	-$(RM) $(test_CLEANFILES) $(test_REALCLEANFILES)

#page
## ------------------------------------------------------------
## Generic package documentation.
## ------------------------------------------------------------


ds_doc_generic_SRCDIR	?= $(top_srcdir)
$(call ds-assert-srcdir,ds_doc_generic)


ds_doc_generic_PTN	?= README* COPYING license.terms INSTALL* BUGS \
			   NEWS ChangeLog DESCRIPTION.txt TODO
ds_doc_generic_TARGETS	?= 
# ds_doc_generic_CLEANFILES	=
# ds_doc_generic_REALCLEANFILES	=

# Why this does not work?
#ds_doc_generic_INSTLST		?= DS_GLOBSRC(ds_doc_srcdir,$(ds_doc_generic_PTN))
ds_doc_generic_INSTLST		= $(filter-out %~,$(wildcard $(addprefix $(ds_doc_generic_SRCDIR)/,$(ds_doc_generic_PTN))))
ds_doc_generic_INSTDIR		= $(pkgdocdir)


.PHONY: $(addprefix ds_doc_generic-, all clean realclean install)
ds_doc_generic-all: $(ds_doc_generic_TARGETS)
ds_doc_generic-clean:
	-@$(call ds-clean-files,ds_doc_generic)
ds_doc_generic-realclean:
	-@$(call ds-real-clean-files,ds_doc_generic)
ds_doc_generic-install: ds_doc_generic-install-sub
	@$(call ds-install-module,ds_doc_generic,DATA)
ds_doc_generic-install-sub:
doc:		ds_doc_generic-all
doc-clean:	ds_doc_generic-clean
doc-realclean:	ds_doc_generic-realclean
doc-install:	ds_doc_generic-install


#page
## ------------------------------------------------------------
## Package documentation in Texinfo format.
## ------------------------------------------------------------


ds_doc_texinfo_SRCDIR	?= $(top_srcdir)/./doc
$(call ds-assert-srcdir,ds_doc_texinfo)

ds_doc_texinfo_BUILDDIR	= $(top_builddir)/ds_doc_texinfo.d

ds_doc_texi2info_BUILDDIR	?= $(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2info-make-builddir:
	$(call ds-make-builddir,ds_doc_texi2info)
ds_doc_texi2info-all: ds_doc_texi2info-make-builddir


ds_doc_texi2html_BUILDDIR	?= $(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2html-make-builddir:
	$(call ds-make-builddir,ds_doc_texi2html)
ds_doc_texi2html-all: ds_doc_texi2html-make-builddir

ds_doc_texinfo_SOURCES	= $(wildcard $(ds_doc_texinfo_SRCDIR)/*.texi)

vpath	%.texi		$(ds_doc_texinfo_SRCDIR)
vpath	%.texiinc	$(ds_doc_texinfo_SRCDIR)

DS_TEXI_FLAGS		= -I $(ds_doc_texinfo_SRCDIR) -I $(ds_doc_texinfo_BUILDDIR)
DS_TEXI2INFO_FLAGS	= $(DS_TEXI_FLAGS)
DS_TEXI2HTML_FLAGS	= $(DS_TEXI_FLAGS) --html --no-split

ds_doc_texinfo_PREREQ	= $(ds_doc_texinfo_BUILDDIR)/version.texiinc

# HTML format.

ds_doc_texi2html_TARGETS	= $(addprefix $(ds_doc_texinfo_BUILDDIR)/, \
					$(notdir $(ds_doc_texinfo_SOURCES:.texi=.html)))
ds_doc_texi2html_INSTLST	= $(wildcard $(ds_doc_texi2html_TARGETS))
ds_doc_texi2html_INSTDIR	= $(pkghtmldir)

ds_doc_texi2html_CLEANFILES	= $(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2html_REALCLEANFILES	= $(ds_doc_texi2html_CLEANFILES)


.PHONY: $(addprefix ds_doc_texi2html-, all clean realclean install)
ds_doc_texi2html-all: $(ds_doc_texi2html_TARGETS)
ds_doc_texi2html-clean:
	-@$(call ds-clean-files,ds_doc_texi2html)
ds_doc_texi2html-realclean:
	-@$(call ds-real-clean-files,ds_doc_texi2html)
ds_doc_texi2html-install: ds_doc_texi2html-install-sub
	@$(call ds-install-module,ds_doc_texi2html,DATA)
ds_doc_texi2html-install-sub:
doc:		ds_doc_texi2html-all
doc-clean:	ds_doc_texi2html-clean
doc-realclean:	ds_doc_texi2html-realclean
doc-install:	ds_doc_texi2html-install


# Info format.

ds_doc_texi2info_TARGETS	= $(addprefix $(ds_doc_texinfo_BUILDDIR)/, \
					$(notdir $(ds_doc_texinfo_SOURCES:.texi=.info)))
ds_doc_texi2info_INSTLST	= $(wildcard $(foreach f, $(ds_doc_texi2info_TARGETS), $(f)*))
ds_doc_texi2info_INSTDIR	= $(pkginfodir)

ds_doc_texi2info_CLEANFILES	= $(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2info_REALCLEANFILES	= $(ds_doc_texi2info_CLEANFILES)


.PHONY: $(addprefix ds_doc_texi2info-, all clean realclean install)
ds_doc_texi2info-all: $(ds_doc_texi2info_TARGETS)
ds_doc_texi2info-clean:
	-@$(call ds-clean-files,ds_doc_texi2info)
ds_doc_texi2info-realclean:
	-@$(call ds-real-clean-files,ds_doc_texi2info)
ds_doc_texi2info-install: ds_doc_texi2info-install-sub
	@$(call ds-install-module,ds_doc_texi2info,DATA)
ds_doc_texi2info-install-sub:
doc:		ds_doc_texi2info-all
doc-clean:	ds_doc_texi2info-clean
doc-realclean:	ds_doc_texi2info-realclean
doc-install:	ds_doc_texi2info-install



$(ds_doc_texinfo_BUILDDIR)/%.info: $(ds_doc_texinfo_SRCDIR)/%.texi $(ds_doc_texinfo_PREREQ)
	$(MAKEINFO) $(DS_TEXI2INFO_FLAGS) $(<) -o $(@)

$(ds_doc_texinfo_BUILDDIR)/%.html: $(ds_doc_texinfo_SRCDIR)/%.texi $(ds_doc_texinfo_PREREQ)
	$(MAKEINFO) $(DS_TEXI2HTML_FLAGS) $(<) -o $(@)

$(ds_doc_texinfo_BUILDDIR)/version.texiinc: Makefile
	echo -e "@macro version{}\n$(PACKAGE_XVERSION)\n@end macro\n" >$(@)


#page
## ------------------------------------------------------------
## Configuration inspection scripts.
## ------------------------------------------------------------


ds_config_script_SRCDIR	?= $(top_srcdir)/meta
$(call ds-assert-srcdir,ds_config_script)


ds_config_script_BUILDDIR	?= $(top_builddir)/meta
ds_config_script-make-builddir:
	$(call ds-make-builddir,ds_config_script)
ds_config_script-all: ds_config_script-make-builddir


ds_config_script_NAME	 = $(PACKAGE_NAME_LOWERCASE)-config
ds_config_script_INSTLST = $(ds_config_script_BUILDDIR)/$(ds_config_script_NAME)
ds_config_script_INSTDIR = $(bindir)


.PHONY: $(addprefix ds_config_script-, all clean realclean install)
ds_config_script-all: $(ds_config_script_TARGETS)
ds_config_script-clean:
	-@$(call ds-clean-files,ds_config_script)
ds_config_script-realclean:
	-@$(call ds-real-clean-files,ds_config_script)
ds_config_script-install: ds_config_script-install-sub
	@$(call ds-install-module,ds_config_script,BIN)
ds_config_script-install-sub:
bin:		ds_config_script-all
bin-clean:	ds_config_script-clean
bin-realclean:	ds_config_script-realclean
bin-install:	ds_config_script-install


#page
## ------------------------------------------------------------
## Autoc onfiguration rules.
## ------------------------------------------------------------

ds_config_CLEANFILES	= config.log config.status config.cache Makefile

.PHONY: config-clean nothing

# This target is to allow one to update the 'Makefile', if required
# without doing anything else; if the 'Makefile' does not need updating:
# nothing happens. This target is required by the 'develstuff.sh'
# script when querying the 'Makefile' for variable values. If the ':'
# command is not used, and the target is left with no commands, 'make'
# will print the message "Nothing to be done for 'nothing'"; we do not
# want to fill the user's terminal with this.
nothing:
	@:

Makefile: $(top_srcdir)/Makefile.in $(top_srcdir)/configure $(top_builddir)/config.status
	$(top_builddir)/config.status

config.status: $(top_srcdir)/configure
	$(top_builddir)/config.status --recheck

config-clean:
	-$(RM) $(ds_config_CLEANFILES)

#page
## ------------------------------------------------------------
## End of makefile.
## ------------------------------------------------------------

.PHONY: echo-variable
echo-variable:
	@echo $($(VARIABLE))

.NOEXPORT:



### end of file
# Local Variables:
# mode: makefile
# End: