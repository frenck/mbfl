# file.test --
#
# Part of: Marco's BASH Functions Library
# Contents: tests for file module
# Date: Sun Apr 20, 2003
#
# Abstract
#
#	This file must be executed with:
#
#		$ make all test TESTMATCH=file-
#
#	that will select these tests.
#
# Copyright (c) 2003, 2004, 2005, 2009, 2013, 2018 Marco Maggi
#
# This is free  software you can redistribute it  and/or modify it under
# the terms of  the GNU General Public License as  published by the Free
# Software Foundation; either  version 2, or (at your  option) any later
# version.
#
# This  file is  distributed in  the hope  that it  will be  useful, but
# WITHOUT   ANY  WARRANTY;  without   even  the   implied  warranty   of
# MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
# General Public License for more details.
#
# You  should have received  a copy  of the  GNU General  Public License
# along with this file; see the file COPYING.  If not, write to the Free
# Software Foundation,  Inc., 59  Temple Place -  Suite 330,  Boston, MA
# 02111-1307, USA.
#

#PAGE
## ------------------------------------------------------------
## Setup.
## ------------------------------------------------------------

source setup.sh
testfile="$TMPDIR/proof.txt"

#PAGE

file-extension-1.1 () {
    mbfl_file_extension /path/to/file.ext | dotest-output ext
}
file-extension-1.2 () {
    mbfl_file_extension /path/to/file. | dotest-output
}
file-extension-1.3 () {
    mbfl_file_extension /path/to/file | dotest-output
}
file-extension-1.4 () {
    mbfl_file_extension /path/to/file.ext/ab | dotest-output
}
file-extension-1.5 () {
    mbfl_file_extension /path/to/some.file.ext | dotest-output ext
}
file-extension-1.6 () {
    mbfl_file_extension a | dotest-output
}
file-extension-1.7 () {
    mbfl_file_extension /path/to/.file.ext | dotest-output ext
}
file-extension-1.8 () {
    mbfl_file_extension /path/to/.dotfile | dotest-output
}
file-extension-1.8 () {
    mbfl_file_extension .dotfile | dotest-output
}

### --------------------------------------------------------------------

file-extension-var-1.1 () {
    # We want to test for both  result variable setting and empty output
    # to stdout.
    {
	local RV
	mbfl_file_extension_var RV /path/to/file.ext
	dotest-equal 'ext' "$RV"
    } | dotest-output
}
file-extension-var-1.2 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/file.
	dotest-equal '' "$RV"
    } | dotest-output
}
file-extension-var-1.3 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/file
	dotest-equal '' "$RV"
    } | dotest-output
}
file-extension-var-1.4 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/file.ext/ab
	dotest-equal '' "$RV"
    } | dotest-output
}
file-extension-var-1.5 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/some.file.ext
	dotest-equal 'ext' "$RV"
    } | dotest-output
}
file-extension-var-1.6 () {
    {
	local RV
	mbfl_file_extension_var RV a
	dotest-equal '' "$RV"
    } | dotest-output
}
file-extension-var-1.7 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/.file.ext
	dotest-equal 'ext' "$RV"
    } | dotest-output
}
file-extension-var-1.8 () {
    {
	local RV
	mbfl_file_extension_var RV /path/to/.dotfile
	dotest-equal '' "$RV"
    } | dotest-output
}
file-extension-var-1.9 () {
    {
	local RV
	mbfl_file_extension_var RV .dotfile
	dotest-equal '' "$RV"
    } | dotest-output
}

#PAGE

file-dirname-1.1 () { mbfl_file_dirname /path/to/file.ext | dotest-output "/path/to"; }
file-dirname-1.2 () { mbfl_file_dirname file.ext | dotest-output .; }
file-dirname-1.3 () { mbfl_file_dirname /file.ext | dotest-output /; }
file-dirname-1.4 () { mbfl_file_dirname //file.ext | dotest-output /; }
file-dirname-1.5 () { mbfl_file_dirname /path/to///file.ext | dotest-output "/path/to"; }
file-dirname-1.6 () { mbfl_file_dirname //////file.ext | dotest-output "/"; }
file-dirname-1.7 () { mbfl_file_dirname a/b | dotest-output "a"; }
file-dirname-1.8 () { mbfl_file_dirname a | dotest-output "."; }
file-dirname-1.9 () { mbfl_file_dirname ../a | dotest-output ".."; }
file-dirname-1.10 () { mbfl_file_dirname ./a | dotest-output "."; }
file-dirname-1.11 () { mbfl_file_dirname ../abcd | dotest-output ".."; }
file-dirname-1.12 () { mbfl_file_dirname ./abcd | dotest-output "."; }
file-dirname-1.13 () { mbfl_file_dirname ../abcd/efgh | dotest-output "../abcd"; }
file-dirname-1.14 () { mbfl_file_dirname ./abcd/efgh | dotest-output "./abcd"; }

#PAGE

function file-normalise-1.1 () {
    local testdir=$(dotest-mkdir a/b)

    {
	dotest-cd-tmpdir
	mbfl_file_normalise a/b
	dotest-clean-files
    } | dotest-output "${testdir}"
}
function file-normalise-1.2 () {
    mbfl_file_normalise /path/to/file.ext | dotest-output "/path/to/file.ext"
}
function file-normalise-1.4 () {
    local testdir=$(dotest-mkdir a/b)

    {
	dotest-cd-tmpdir
	mbfl_file_normalise "a/b/.."
	dotest-clean-files
    } | dotest-output "$(dotest-echo-tmpdir)/a"
}
function file-normalise-1.5 () {
    local testdir=`dotest-mkdir a/b/c`

    {
	dotest-cd-tmpdir
	mbfl_file_normalise "a/./b/./c"
	dotest-clean-files
    } | dotest-output "${testdir}"
}
function file-normalise-1.6 () {
    local testdir=`dotest-mkdir a/b/c`

    {
	dotest-cd-tmpdir
	mbfl_file_normalise "a/b/c/../.."
	dotest-clean-files
    } | dotest-output "$(dotest-echo-tmpdir)/a"
}
function file-normalise-1.7 () {
    local testdir=`dotest-mkdir a/b`

    {
	dotest-cd-tmpdir a/b
	mbfl_file_normalise ../b
	dotest-clean-files
    } | dotest-output "${testdir}"
}
#page

function file-normalise-2.3 () {
    mbfl_file_normalise a/b wo | dotest-output wo/a/b
}
function file-normalise-2.4 () {
    mbfl_file_normalise X/../Y abc/def/ghi/lmn/opq/rst | \
	dotest-output abc/def/ghi/lmn/opq/rst/Y
}
function file-normalise-2.5 () {
    mbfl_file_normalise X/Y/../Y abc/def/ghi/lmn/opq/rst | \
	dotest-output abc/def/ghi/lmn/opq/rst/X/Y
}
function file-normalise-2.6 () {
    mbfl_file_normalise X/Y/../Y abc/def/ghi/../lmn/opq/rst | \
	dotest-output abc/def/lmn/opq/rst/X/Y
}

#page

function file-subpathname-1.1 () {
    mbfl_file_subpathname /a /a | dotest-output ./
}

function file-subpathname-2.1 () {
    mbfl_file_subpathname /a/b/c /a/ | dotest-output ./b/c
}
function file-subpathname-2.2 () {
    mbfl_file_subpathname /a/b/c /a | dotest-output ./b/c
}

function file-subpathname-3.1 () {
    mbfl_file_subpathname /a/b/c /d || true
}

#PAGE

function file-rootname-1.1 () {
    mbfl_file_rootname /path/to/file.ext | dotest-output "/path/to/file"
}
function file-rootname-1.2 () {
    mbfl_file_rootname /path/to/file | dotest-output "/path/to/file"
}
function file-rootname-1.3 () {
    mbfl_file_rootname /path/to/ab.cd/file | dotest-output "/path/to/ab.cd/file"
}
function file-rootname-1.4 () {
    mbfl_file_rootname .wow | dotest-output ".wow"
}
function file-rootname-1.5 () {
    mbfl_file_rootname a | dotest-output "a"
}

#PAGE

function file-split-1.1 () {
    local SPLITPATH SPLITCOUNT; declare -a SPLITPATH

    mbfl_file_split /path/to/file.ext
    dotest-equal path "${SPLITPATH[0]}" && \
        dotest-equal to "${SPLITPATH[1]}" && \
        dotest-equal file.ext "${SPLITPATH[2]}" &&\
	dotest-equal 3 $SPLITCOUNT
}
function file-split-1.2 () {
    local SPLITPATH SPLITCOUNT; declare -a SPLITPATH

    mbfl_file_split a
    dotest-equal a "${SPLITPATH[0]}" && \
    	dotest-equal 1 $SPLITCOUNT
}
function file-split-1.3 () {
    local SPLITPATH SPLITCOUNT; declare -a SPLITPATH

    mbfl_file_split ///path///////////to/file.ext
    dotest-equal path "${SPLITPATH[0]}" && \
        dotest-equal to "${SPLITPATH[1]}" && \
        dotest-equal file.ext "${SPLITPATH[2]}" && \
	dotest-equal 3 $SPLITCOUNT
}

#PAGE

function file-tail-1.1 () {
    mbfl_file_tail /path/to/file.ext | dotest-output "file.ext"
}
function file-tail-1.2 () {
    mbfl_file_tail /path/to/ | dotest-output
}
function file-tail-1.3 () {
    mbfl_file_tail file.ext | dotest-output "file.ext"
}

#page

function file-remove-1.1 () {
    dotest-mktmpdir
    local name=$(dotest-mkfile file.ext)
    local result=

    mbfl_file_enable_remove
    mbfl_file_remove_file "$name"
    test ! -f "$name"
    dotest-clean-files
}
function file-remove-1.2 () {
    local name=$(dotest-mkdir dir.d)
    local result=

    mbfl_file_enable_remove
    mbfl_file_remove_directory "$name"
    test ! -d "$name"
    dotest-clean-files
}
function file-remove-1.3 () {
    dotest-mktmpdir
    local name=$(dotest-mkfile file.ext)

    mbfl_file_enable_remove
    mbfl_file_remove "$name"
    test ! -e "$name"
    dotest-clean-files
}
function file-remove-1.4 () {
    dotest-mktmpdir
    local name=$(dotest-mkfile file.ext)

    mbfl_file_enable_remove
    mbfl_file_remove "$name"
    test ! -e "$name"
    dotest-clean-files
}

#page

function file-mkdir-1.1 () {
    local name="$(dotest-echo-tmpdir)/dir.d"

    mbfl_file_enable_make_directory
    mbfl_file_make_directory "$name"
    dotest-clean-files
}

#page

function file-owner-1.1 () {
    local name=$(dotest-mkfile file.ext)

    mbfl_file_enable_listing
    {
	mbfl_file_get_owner "$name"
	dotest-clean-files
    } | dotest-output $USER
}

#page

function file-size-1.1 () {
    local PATHNAME=$(dotest-mkfile file.ext)

    echo -n 0123456789 >"${PATHNAME}"
    mbfl_file_enable_listing
    {
	mbfl_file_get_size "${PATHNAME}"
	dotest-clean-files
    } | dotest-output 10
}

#page

function file-tar-1.1 () {
    local rootdir=$(dotest-mkdir top)
    local arootdir=$(dotest-mkdir top/a)
    local brootdir=$(dotest-mkdir top/b)
    local tarfile=$(dotest-mkfile a.tar)

    {
	dotest-mkdir "top/a/alpha"
	dotest-mkdir "top/a/beta"
	dotest-mkfile "top/a/alpha/file.ext"
	dotest-mkfile "top/a/beta/file.ext"
    } >/dev/null

    mbfl_file_enable_tar
    mbfl_tar_create_to_stdout "$arootdir" | \
	mbfl_tar_extract_from_stdin "$brootdir"
    dotest-program-exec diff --recursive "$arootdir" "$brootdir" | dotest-output
    dotest-clean-files
}
function file-tar-2.1 () {
    local rootdir=$(dotest-mkdir top)
    local arootdir=$(dotest-mkdir top/a)
    local brootdir=$(dotest-mkdir top/b)
    local tarfile="$(dotest-echo-tmpdir)/a.tar"

    {
	dotest-mkdir "top/a/alpha"
	dotest-mkdir "top/a/beta"
	dotest-mkfile "top/a/alpha/file.ext"
	dotest-mkfile "top/a/beta/file.ext"
    } >/dev/null

    mbfl_file_enable_tar
    mbfl_tar_create_to_file "$arootdir" "${tarfile}"
    mbfl_tar_extract_from_stdin "$brootdir" <"${tarfile}"

    dotest-program-exec diff --recursive "$arootdir" "$brootdir" | dotest-output
    dotest-clean-files
}

#page

file-is-file-1.1 () {
    local PATHNAME=$(dotest-mkfile pathname)
    local result

    mbfl_file_is_file "${PATHNAME}"
    result=$?
    dotest-clean-files
    return $result
}
file-is-file-1.2 () {
    mbfl_file_is_file a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent file 'a'"
}

# ------------------------------------------------------------

file-is-readable-1.1 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    mbfl_file_is_readable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-is-readable-1.2 () {
    mbfl_file_is_readable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent file 'a'"
}
file-is-readable-1.3 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    chmod u-r "${PATHNAME}"
    mbfl_file_is_readable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not readable pathname '${PATHNAME}'"
    result=$?; dotest-clean-files; return $result
}

# ------------------------------------------------------------

file-is-writable-1.1 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    mbfl_file_is_writable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-is-writable-1.2 () {
    mbfl_file_is_writable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent file 'a'"
}
file-is-writable-1.3 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    chmod u-w "${PATHNAME}"
    mbfl_file_is_writable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not writable pathname '${PATHNAME}'"
    result=$?; dotest-clean-files; return $result
}

# ------------------------------------------------------------

file-is-executable-1.1 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    chmod u+x "${PATHNAME}"
    mbfl_file_is_executable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-is-executable-1.2 () {
    mbfl_file_is_executable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent file 'a'"
}
file-is-executable-1.3 () {
    local PATHNAME=$(dotest-mkfile pathname) result

    chmod u-x "${PATHNAME}"
    mbfl_file_is_executable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not executable pathname '${PATHNAME}'"
    result=$?; dotest-clean-files; return $result
}

# ------------------------------------------------------------

file-is-directory-1.1 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    mbfl_file_is_directory "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-is-directory-1.2 () {
    mbfl_file_is_directory a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent directory 'a'"
}

# ------------------------------------------------------------

file-directory-is-readable-1.1 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    mbfl_file_directory_is_readable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-directory-is-readable-1.2 () {
    mbfl_file_directory_is_readable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent directory 'a'"
}
file-directory-is-readable-1.3 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    chmod u-r "${PATHNAME}"
    mbfl_file_directory_is_readable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not readable pathname '${PATHNAME}'"
    chmod u+r "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}

# ------------------------------------------------------------

file-directory-is-writable-1.1 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    mbfl_file_directory_is_writable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-directory-is-writable-1.2 () {
    mbfl_file_directory_is_writable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent directory 'a'"
}
file-directory-is-writable-1.3 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    chmod u-w "${PATHNAME}"
    mbfl_file_directory_is_writable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not writable pathname '${PATHNAME}'"
    result=$?; dotest-clean-files; return $result
}

# ------------------------------------------------------------

file-directory-is-executable-1.1 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    chmod 0700 "${PATHNAME}"
    mbfl_file_directory_is_executable "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}
file-directory-is-executable-1.2 () {
    mbfl_file_directory_is_executable a print_error 2>&1 | \
        dotest-output "<unknown>: error: unexistent directory 'a'"
}
file-directory-is-executable-1.3 () {
    local PATHNAME=$(dotest-mkdir pathname) result

    chmod u-x "${PATHNAME}"
    mbfl_file_directory_is_executable "${PATHNAME}" print_error 2>&1 | \
        dotest-output "<unknown>: error: not executable pathname '${PATHNAME}'"
    chmod u+x "${PATHNAME}"
    result=$?; dotest-clean-files; return $result
}

#page

file-get-permissions-1.1 () {
    dotest-mktmpdir
    local PATHNAME=$(dotest-mkfile file.ext)
    local MODE=0750

    chmod ${MODE} "${PATHNAME}"
    mbfl_file_enable_permissions
    {
	mbfl_file_get_permissions "$PATHNAME"
	dotest-clean-files
    } | dotest-output ${MODE}
}
file-get-permissions-2.1 () {
    dotest-mktmpdir
    local PATHNAME=$(dotest-mkfile file.ext)
    local MODE=0750

    mbfl_file_enable_permissions
    mbfl_file_set_permissions ${MODE} "${PATHNAME}"
    {
	mbfl_file_get_permissions "${PATHNAME}"
	dotest-clean-files
    } | dotest-output ${MODE}
}

#page

file-write-1.1 () {
    dotest-mktmpdir
    local PATHNAME=$(dotest-mkfile file.ext)
    local STRING="this string" CONTENT=

    mbfl_file_write "${STRING}" "${PATHNAME}"
    CONTENT=$(<"${PATHNAME}")
    dotest-clean-files
    dotest-equal "${STRING}" "${CONTENT}"
}

file-append-1.1 () {
    dotest-mktmpdir
    local PATHNAME=$(dotest-mkfile file.ext)
    local STRING="this string" CONTENT=

    mbfl_file_write "${STRING}" "${PATHNAME}"
    mbfl_file_append " ${STRING}" "${PATHNAME}"
    CONTENT=$(<"${PATHNAME}")
    dotest-clean-files
    dotest-equal "${STRING} ${STRING}" "${CONTENT}"
}

file-read-1.1 () {
    dotest-mktmpdir
    local PATHNAME=$(dotest-mkfile file.ext)
    local STRING="this string" CONTENT=

    mbfl_file_write "${STRING}" "${PATHNAME}"
    CONTENT=$(mbfl_file_read "${PATHNAME}")
    dotest-clean-files
    dotest-equal "${STRING}" "${CONTENT}"
}

#page

function file-move-1.1 () {
    local src=$(dotest-mkfile file.ext)
    local dst=$(dotest-echo-tmpdir)/file2.ext

    mbfl_file_enable_move
    mbfl_file_move "${src}" "${dst}"
    test -f "${dst}" -a ! -f "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}
function file-move-1.2 () {
    local src=$(dotest-mkdir file.ext)
    local dst=$(dotest-echo-tmpdir)/file2.ext

    mbfl_file_enable_move
    mbfl_file_move "${src}" "${dst}"
    test -d "${dst}" -a ! -e "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}
function file-move-2.1 () {
    local src=$(dotest-mkfile file.ext)
    local dir=$(dotest-mkdir wap)
    local dst=${dir}/file.ext

    mbfl_file_enable_move
    mbfl_file_move_to_directory "${src}" "${dir}"
    test -f "${dst}" -a ! -f "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}
function file-move-2.2 () {
    local src=$(dotest-mkdir file.ext)
    local dir=$(dotest-mkdir wap)
    local dst=${dir}/file.ext

    mbfl_file_enable_move
    mbfl_file_move_to_directory "${src}" "${dir}"
    test -d "${dst}" -a ! -e "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}

#page

function file-copy-1.1 () {
    local src=$(dotest-mkfile file.ext)
    local dst=$(dotest-echo-tmpdir)/file2.ext

    mbfl_file_enable_copy
    mbfl_file_copy "${src}" "${dst}"
    test -f "${dst}" -a -f "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}
function file-copy-2.1 () {
    local src=$(dotest-mkfile file.ext)
    local dir=$(dotest-mkdir wap)
    local dst=${dir}/file.ext

    mbfl_file_enable_copy
    mbfl_file_copy_to_directory "${src}" "${dir}"
    test -f "${dst}" -a -f "${src}"
    dotest-equal 0 $?
    dotest-clean-files
}

#page

function file-stat-1.1 () {
    local PATHNAME=$(dotest-mkfile file.ext)
    local RESULT
    mbfl_file_enable_stat
    RESULT=$(mbfl_file_stat "${PATHNAME}" --format='%F')
    dotest-equal 0 $? && dotest-equal regular $RESULT
    dotest-clean-files
}
function file-stat-1.2 () {
    local PATHNAME=/bin
    local RESULT
    mbfl_file_enable_stat
    RESULT=$(mbfl_file_stat "${PATHNAME}" --format='%F')
    dotest-equal 0 $? && dotest-equal directory $RESULT
    dotest-clean-files
}

#PAGE

dotest file-
dotest-final-report

### end of file
# Local Variables:
# mode: sh
# End:
