# getopts.test --
#
# Part of: Marco's BASH function libraries
# Contents: tests for the getopts library
# Date: Tue Apr 22, 2003
#
# Abstract
#
#	To execute the tests in this file:
#
#		$ TESTMATCH=getopts- bash getopts.test
#
# Copyright (c) 2003, 2004, 2005, 2009 Marco Maggi
#
# This is free  software you can redistribute it  and/or modify it under
# the terms of  the GNU General Public License as  published by the Free
# Software Foundation; either  version 2, or (at your  option) any later
# version.
#
# This  file is  distributed in  the hope  that it  will be  useful, but
# WITHOUT   ANY  WARRANTY;  without   even  the   implied  warranty   of
# MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
# General Public License for more details.
#
# You  should have received  a copy  of the  GNU General  Public License
# along with this file; see the file COPYING.  If not, write to the Free
# Software Foundation,  Inc., 59  Temple Place -  Suite 330,  Boston, MA
# 02111-1307, USA.
#

#PAGE
## ------------------------------------------------------------
## Setup.
## ------------------------------------------------------------

source setup.sh

#PAGE

function getopts-1.1 () { mbfl_getopts_islong --option; }
function getopts-1.2 () { ! mbfl_getopts_islong -option;  }
function getopts-1.3 () { ! mbfl_getopts_islong -- ;  }
function getopts-1.4 () { ! mbfl_getopts_islong --optio\\\) ; }
function getopts-1.5 () { mbfl_getopts_islong --option1 ; }
function getopts-1.6 () { mbfl_getopts_islong --option-one ; }
function getopts-1.7 () {
    local name
    mbfl_getopts_islong --option name
    dotest-equal option $name
}

#PAGE

function getopts-2.1 () { mbfl_getopts_islong_with --option=one ; }
function getopts-2.2 () { ! mbfl_getopts_islong_with --option ; }
function getopts-2.3 () { ! mbfl_getopts_islong_with -option=one ; }
function getopts-2.4 () {
    local p_name p_value
    mbfl_getopts_islong_with --option=two p_name p_value
    dotest-equal option $p_name && dotest-equal two $p_value
}
function getopts-2.5 () {
    local p_name p_value
    mbfl_getopts_islong_with --a=1 p_name p_value
    dotest-equal a $p_name && dotest-equal 1 $p_value
}
function getopts-2.6 () {
    local p_name p_value
    mbfl_getopts_islong_with --a="1 2" p_name p_value
    dotest-equal a $p_name && dotest-equal "1 2" "$p_value"
}
function getopts-2.7 () {
    local p_name p_value
    mbfl_getopts_islong_with --a=1\\\\ p_name p_value
    dotest-equal a $p_name && dotest-equal "1\\\\" $p_value
}
function getopts-2.8 () { ! mbfl_getopts_islong_with --afasd= ; }

#PAGE

function getopts-3.1 () { mbfl_getopts_isbrief -a; }
function getopts-3.2 () { ! mbfl_getopts_isbrief -aa; }
function getopts-3.3 () { mbfl_getopts_isbrief -1; }
function getopts-3.4 () { ! mbfl_getopts_isbrief -_ ; }
function getopts-3.5 () { ! mbfl_getopts_isbrief -\[; }
function getopts-3.6 () { mbfl_getopts_isbrief -o a ; }

function getopts-4.1 () { mbfl_getopts_isbrief_with -a123; }
function getopts-4.2 () { ! mbfl_getopts_isbrief_with -a; }
function getopts-4.3 () { ! mbfl_getopts_isbrief_with -_123; }
function getopts-4.4 () {
    local p_name p_value
    mbfl_getopts_isbrief_with -A123 p_name p_value
    dotest-equal A $p_name && dotest-equal 123 $p_value
}

#page

function getopts-5.1 () {
    mbfl_declare_option A yes o option noarg 'an option' | dotest-output
}
function getopts-5.2 () {
    mbfl_declare_option A no o option noarg 'an option' | dotest-output
}
function getopts-5.3 () {
    mbfl_declare_option A a o option witharg 'an option' | dotest-output
}

function getopts-5.4 () {
    mbfl_main_set_main wao
    dotest-equal wao ${mbfl_main_SCRIPT_FUNCTION}
    mbfl_declare_option ACTION_ALPHA yes a alpha noarg 'an option'
    mbfl_declare_option ACTION_BETA no b beta noarg 'an option'
    dotest-equal script_action_alpha ${mbfl_main_SCRIPT_FUNCTION}
}

#page

function getopts-6.1 () {
    mbfl_declare_option A a o option wappa 'an option' 2>&1 | dotest-output \
	"<unknown>: error: wrong value 'wappa' to hasarg field in option declaration number 1"
}
function getopts-6.2 () {
    mbfl_declare_option A a o option noarg 'an option' 2>&1| dotest-output \
	"<unknown>: error: wrong value 'a' as default for option with no argument number 1"
}
function getopts-6.3 () {
    mbfl_declare_option ACTION_DELTA no o option witharg 'an option' 2>&1 | dotest-output \
        "<unknown>: error: action option must be with no argument 'ACTION_DELTA'"
}

#page

function getopts-7.1 () {
    mbfl_declare_option A yes o option noarg 'an option'
    mbfl_declare_option B yes a another noarg 'an option'
    mbfl_getopts_print_long_switches | dotest-output \
        '--option --another'
}

#page

function getopts-8.1 () { mbfl_getopts_is_action_argument alpha; }
function getopts-8.2 () { mbfl_getopts_is_action_argument alpha-beta; }
function getopts-8.3 () { mbfl_getopts_is_action_argument alpha-beta123; }
function getopts-8.4 () { ! mbfl_getopts_is_action_argument 123alpha; }
function getopts-8.5 () { ! mbfl_getopts_is_action_argument -a; }
function getopts-8.6 () { ! mbfl_getopts_is_action_argument -a123; }
function getopts-8.7 () { ! mbfl_getopts_is_action_argument --alpha; }
function getopts-8.8 () { ! mbfl_getopts_is_action_argument --alpha=123; }

#page

function getopts-9.1 () {
    mbfl_declare_action_argument A a yes no 'an option'
}
function getopts-9.2 () {
    mbfl_declare_action_argument A a no no 'an option'
}
function getopts-9.3 () {
    mbfl_declare_action_argument A a wappa no 'an option' 2>&1 | dotest-output \
	"<unknown>: error: wrong value 'wappa' as selection for action argument number 1"
}
function getopts-9.4 () {
    mbfl_declare_action_argument A 123 wappa no 'an option' 2>&1 | dotest-output \
	"<unknown>: error: wrong value '123' as keyword for action argument number 1"
}
function getopts-9.5 () {
    mbfl_declare_action_argument A a no wappa 'an option' 2>&1 | dotest-output \
	"<unknown>: error: wrong value 'wappa' as skip options flag for action argument number 1"
}

#page

function getopts-10.1 () {
    mbfl_declare_action_argument A a yes no 'an option'
    mbfl_declare_action_argument B b no  no 'an option'
    mbfl_getopts_print_action_arguments | dotest-output 'a b'
}
function getopts-10.2 () {
    mbfl_declare_action_argument A alpha yes no 'an option'
    mbfl_declare_action_argument B beta no no 'an option'
    mbfl_getopts_print_action_arguments | dotest-output 'alpha beta'
}


#page

dotest getopts-

### end of file
# Local Variables:
# mode: sh
# End:
